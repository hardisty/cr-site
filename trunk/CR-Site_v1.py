# ---------------------------------------------------------------------------
# CR-Site.py
# Created on: 2012-02-29 
#   (generated by ArcGIS/ModelBuilder)
# 
# ---------------------------------------------------------------------------

try:
    #--Import arcpy module and check out licenses
    import arcpy
    arcpy.CheckOutExtension("spatial")

    #--Required user parameters
    projectAOI = arcpy.GetParameterAsText(0)
    outputFolder = arcpy.GetParameterAsText(1)
    crSiteOutput = arcpy.GetParameterAsText(2)

    #--Set geoprocessing environments
    arcpy.env.scratchWorkspace = outputFolder
    arcpy.env.outputCoordinateSystem = arcpy.Describe(projectAOI).spatialReference
    arcpy.env.extent = arcpy.Describe(projectAOI).extent
    arcpy.env.workspace = outputFolder
    arcpy.env.overwriteOutput = True

    #--Optional user parameters
    roadsInput = arcpy.GetParameterAsText(3)
    roadsWeight = arcpy.GetParameterAsText(4)
    roadsSearchRadius = arcpy.GetParameterAsText(5)

    portsInput = arcpy.GetParameterAsText(6)
    portsWeight = arcpy.GetParameterAsText(7)
    portsSearchRadius = arcpy.GetParameterAsText(8)

    riversInput = arcpy.GetParameterAsText(9)
    riversWeight = arcpy.GetParameterAsText(10)
    riversSearchRadius = arcpy.GetParameterAsText(11)

    landuseInput = arcpy.GetParameterAsText(12)
    landuseWeight = arcpy.GetParameterAsText(13)

    elevationInput = arcpy.GetParameterAsText(14)
    elevationWeight = arcpy.GetParameterAsText(15)
    elevationMaxSlope = arcpy.GetParameterAsText(16)

    userDefinedInput1 = arcpy.GetParameterAsText(17)
    userDefinedWeight1 = arcpy.GetParameterAsText(18)

    userDefinedInput2 = arcpy.GetParameterAsText(19)
    userDefinedWeight2 = arcpy.GetParameterAsText(20)

    exclusionInput = arcpy.GetParameterAsText(21)

    #--Function to normalize weight values
    def calculateNormalizedWeight():
        weightSum = 0.0
        global roadsWeight, portsWeight, riversWeight, landuseWeight, elevationWeight, userDefinedWeight1, userDefinedWeight2
        if roadsWeight:
            weightSum += float(roadsWeight)
        if portsWeight:
            weightSum += float(portsWeight)
        if riversWeight:
            weightSum += float(riversWeight)
        if landuseWeight:
            weightSum += float(landuseWeight)
        if elevationWeight:
            weightSum += float(elevationWeight)
        if userDefinedWeight1:
            weightSum += float(userDefinedWeight1)
        if userDefinedWeight2:
            weightSum += float(userDefinedWeight1)

        if roadsWeight:
            roadsWeight = str(float(roadsWeight) / weightSum )
        if portsWeight:
            portsWeight = str(float(portsWeight) / weightSum )
        if riversWeight:
            riversWeight = str(float(riversWeight) / weightSum )
        if landuseWeight:
            landuseWeight = str(float(landuseWeight) / weightSum )
        if elevationWeight:
            elevationWeight = str(float(elevationWeight) / weightSum )
        if userDefinedWeight1:
            userDefinedWeight1 = str(float(userDefinedWeight1) / weightSum )
        if userDefinedWeight2:
            userDefinedWeight2 = str(float(userDefinedWeight2) / weightSum )

    #--Define process functions for all input layers   
    def FISHNET ():
        fishnetExtent = arcpy.Describe(projectAOI).extent
        xmin = fishnetExtent.xmin
        ymin = fishnetExtent.ymin
        xmax = fishnetExtent.xmax
        ymax = fishnetExtent.ymax
        yaxis = ymin + 10
        syaxis = str(yaxis)
        sxmin = str(xmin)
        symin = str(ymin)
        sxmax = str(xmax)
        symax = str(ymax)
        fishnetProcess = arcpy.CreateFishnet_management(crSiteOutput, sxmin + " " + symin, sxmin + " " + syaxis, "0", "0", "10", "10", sxmax + " " + symax, "NO_LABELS", projectAOI, "POLYGON")
        fishnetProcess = arcpy.AddField_management(fishnetProcess, "TOTAL_SUITABILITY", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
        fishnetProcess = arcpy.CalculateField_management(fishnetProcess, "TOTAL_SUITABILITY", "0", "VB", "")
        fishnetProcess = arcpy.CopyFeatures_management(fishnetProcess, "fishnetCopy")
        arcpy.AddMessage("Processd Area of Interest")

    def ROADS ():
        if roadsInput and roadsWeight and roadsSearchRadius:
            roadsProcess = arcpy.Clip_analysis(roadsInput, projectAOI, "in_memory\\roadsClip" , "")
            roadsProcess = arcpy.SpatialJoin_analysis("fishnetCopy", roadsProcess, "in_memory\\roadsSJ", "JOIN_ONE_TO_ONE", "KEEP_ALL", "#", "WITHIN_A_DISTANCE", roadsSearchRadius, "")
            roadsProcess = arcpy.AddField_management(roadsProcess, "RoadsRanking", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            roadsProcess = arcpy.AddField_management(roadsProcess, "RoadsWeight", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            roadsProcess = arcpy.CalculateField_management(roadsProcess, "RoadsRanking", "calc (!Join_Count!)", "PYTHON_9.3", "def calc (value):\\n  if value >= 2:\\n    return 10\\n  elif value == 1:\\n    return 5\\n  else:\\n    return 1")
            roadsProcess = arcpy.CalculateField_management(roadsProcess, "RoadsWeight", roadsWeight, "VB", "")
            roadsProcess = arcpy.JoinField_management(crSiteOutput, "OID", roadsProcess, "TARGET_FID", "RoadsRanking;RoadsWeight")
            roadsProcess = arcpy.CalculateField_management(crSiteOutput, "TOTAL_SUITABILITY", "[TOTAL_SUITABILITY] + ( [RoadsRanking] * [RoadsWeight])", "VB", "")
            arcpy.Delete_management("in_memory")
            arcpy.AddMessage("Roads Processed")
        else:
            arcpy.AddMessage("All Road parameters were not populated, Roads not processed")

    def PORTS ():
        if portsInput and portsWeight and portsSearchRadius:
            portsProcess = arcpy.Clip_analysis(portsInput, projectAOI, "in_memory\\portsClip", "")
            portsProcess = arcpy.SpatialJoin_analysis("fishnetCopy", portsProcess, "in_memory\\portsSJ", "JOIN_ONE_TO_ONE", "KEEP_ALL", "#", "WITHIN_A_DISTANCE", portsSearchRadius, "")
            portsProcess = arcpy.AddField_management(portsProcess, "PortsRanking", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            portsProcess = arcpy.AddField_management(portsProcess, "PortsWeight", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            portsProcess = arcpy.CalculateField_management(portsProcess, "PortsRanking", "calc (!Join_Count!)", "PYTHON_9.3", "def calc (value):\\n  if value >= 2:\\n    return 10\\n  elif value == 1:\\n    return 5\\n  else:\\n    return 1")
            portsProcess = arcpy.CalculateField_management(portsProcess, "PortsWeight", portsWeight, "VB", "")
            portsProcess = arcpy.JoinField_management(crSiteOutput, "OID", portsProcess, "TARGET_FID", "PortsRanking;PortsWeight")
            portsProcess = arcpy.CalculateField_management(crSiteOutput, "TOTAL_SUITABILITY", "[TOTAL_SUITABILITY] + ( [PortsRanking] * [PortsWeight])", "VB", "")
            arcpy.Delete_management("in_memory")
            arcpy.AddMessage("Ports Processed")
        else:
            arcpy.AddMessage("All Port parameters were not populated, Ports not processed") 

    def RIVERS ():
        if riversInput and riversWeight and riversSearchRadius:
            riversProcess = arcpy.Clip_analysis(riversInput, projectAOI, "in_memory\\riversClip", "")
            riversProcess = arcpy.SpatialJoin_analysis("fishnetCopy", riversProcess, "in_memory\\riversSJ", "JOIN_ONE_TO_ONE", "KEEP_ALL", "#", "WITHIN_A_DISTANCE", riversSearchRadius, "")
            riversProcess = arcpy.AddField_management(riversProcess, "RiversRanking", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            riversProcess = arcpy.AddField_management(riversProcess, "RiversWeight", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            riversProcess = arcpy.CalculateField_management(riversProcess, "RiversRanking", "calc (!Join_Count!)", "PYTHON_9.3", "def calc (value):\\n  if value >= 2:\\n    return 10\\n  elif value == 1:\\n    return 5\\n  else:\\n    return 1")
            riversProcess = arcpy.CalculateField_management(riversProcess, "RiversWeight", riversWeight, "VB", "")
            riversProcess = arcpy.JoinField_management(crSiteOutput, "OID", riversProcess, "TARGET_FID", "RiversRanking;RiversWeight")
            riversProcess = arcpy.CalculateField_management(crSiteOutput, "TOTAL_SUITABILITY", "[TOTAL_SUITABILITY] + ( [RiversRanking] * [RiversWeight])", "VB", "")
            arcpy.Delete_management("in_memory")
            arcpy.AddMessage("Rivers Processed")
        else:
            arcpy.AddMessage("All River parameters were not populated, Rivers not processed")

    def LANDUSE ():
        if landuseInput and landuseWeight:
            landuseProcess = arcpy.Clip_analysis(landuseInput, projectAOI, "in_memory\\landuseClip", "")
            landuseProcess = arcpy.SpatialJoin_analysis("fishnetCopy", landuseProcess, "in_memory\\landuseSJ", "JOIN_ONE_TO_ONE", "KEEP_ALL", "#", "INTERSECT", "", "")
            landuseProcess = arcpy.AddField_management(landuseProcess, "LanduseRanking", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            landuseProcess = arcpy.AddField_management(landuseProcess, "LanduseWeight", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            landuseProcess = arcpy.CalculateField_management(landuseProcess, "LanduseRanking", "calc (!Join_Count!)", "PYTHON_9.3", "def calc (value):\\n  if value >= 1:\\n    return 10\\n  else:\\n    return 1")
            landuseProcess = arcpy.CalculateField_management(landuseProcess, "LanduseWeight", landuseWeight, "VB", "")
            landuseProcess = arcpy.JoinField_management(crSiteOutput, "OID", landuseProcess, "TARGET_FID", "LanduseRanking;LanduseWeight")
            landuseProcess = arcpy.CalculateField_management(crSiteOutput, "TOTAL_SUITABILITY", "[TOTAL_SUITABILITY] + ( [LanduseRanking] * [LanduseWeight])", "VB", "")
            arcpy.Delete_management("in_memory")
            arcpy.AddMessage("Land Use Processed")
        else:
            arcpy.AddMessage("All Land Use parameters were not populated, Land Use not processed")

    def ELEVATION ():
        if elevationInput and elevationWeight:
            elevationExtent = arcpy.Describe(projectAOI).extent
            xmin = elevationExtent.xmin
            ymin = elevationExtent.ymin
            xmax = elevationExtent.xmax
            ymax = elevationExtent.ymax
            sxmin = str(xmin)
            symin = str(ymin)
            sxmax = str(xmax)
            symax = str(ymax)
            elevationProcess = arcpy.Clip_management(elevationInput, sxmin + " " + symin + " " + sxmax + " " + symax, "elevationClip", projectAOI, "", "ClippingGeometry")
            elevationProcess = arcpy.gp.Slope_sa(elevationProcess, "slopeOutput", "DEGREE", "1")
            elevationProcess = arcpy.gp.Reclassify_sa(elevationProcess, "Value", "0 " + elevationMaxSlope + " 1; " + elevationMaxSlope + " 90 NODATA", "slopeReclass", "NODATA")
            elevationProcess = arcpy.RasterToPolygon_conversion(elevationProcess, "in_memory\\slopePoly", "SIMPLIFY", "VALUE")
            elevationProcess = arcpy.SpatialJoin_analysis("fishnetCopy", elevationProcess, "in_memory\\slopeSJ", "JOIN_ONE_TO_ONE", "KEEP_ALL", "#", "INTERSECT", "", "")
            elevationProcess = arcpy.AddField_management(elevationProcess, "SlopeRanking", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            elevationProcess = arcpy.AddField_management(elevationProcess, "SlopeWeight", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            elevationProcess = arcpy.CalculateField_management(elevationProcess, "SlopeRanking", "calc (!Join_Count!)", "PYTHON_9.3", "def calc (value):\\n  if value >= 1:\\n    return 10\\n  else:\\n    return 1")
            elevationProcess = arcpy.CalculateField_management(elevationProcess, "SlopeWeight", elevationWeight, "VB", "")
            elevationProcess = arcpy.JoinField_management(crSiteOutput, "OID", elevationProcess, "TARGET_FID", "SlopeRanking;SlopeWeight")
            elevationProcess = arcpy.CalculateField_management(crSiteOutput, "TOTAL_SUITABILITY", "[TOTAL_SUITABILITY] + ( [SlopeRanking] * [SlopeWeight])", "VB", "")
            arcpy.Delete_management("in_memory")
            arcpy.Delete_management("elevationClip")
            arcpy.Delete_management("slopeOutput")
            arcpy.Delete_management("slopeReclass")
            arcpy.AddMessage("Elevation Processed")
        else:
            arcpy.AddMessage("All Elevation parameters were not populated, Elevation not processed")

    def USERINPUT1 ():
        if userDefinedInput1 and userDefinedWeight1:
            userDefined1Process = arcpy.Clip_analysis(userDefinedInput1, projectAOI, "in_memory\\userDefined1Clip", "")
            userDefined1Process = arcpy.SpatialJoin_analysis("fishnetCopy", userDefined1Process, "in_memory\\userDefined1SJ", "JOIN_ONE_TO_ONE", "KEEP_ALL", "#", "INTERSECT", "", "")
            userDefined1Process = arcpy.AddField_management(userDefined1Process, "UserDefined1Ranking", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            userDefined1Process = arcpy.AddField_management(userDefined1Process, "UserDefined1Weight", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            userDefined1Process = arcpy.CalculateField_management(userDefined1Process, "UserDefined1Ranking", "calc (!Join_Count!)", "PYTHON_9.3", "def calc (value):\\n  if value >=1:\\n    return 10\\n  else:\\n    return 1")
            userDefined1Process = arcpy.CalculateField_management(userDefined1Process, "UserDefined1Weight", userDefinedWeight1, "VB", "")
            userDefined1Process = arcpy.JoinField_management(crSiteOutput, "OID", userDefined1Process, "TARGET_FID", "UserDefined1Ranking;UserDefined1Weight")
            userDefined1Process = arcpy.CalculateField_management(crSiteOutput, "TOTAL_SUITABILITY", "[TOTAL_SUITABILITY] + ( [UserDefined1Ranking] * [UserDefined1Weight])", "VB", "")
            arcpy.Delete_management("in_memory")
            arcpy.AddMessage("User Defined Input #1 Processed")
        else:
            arcpy.AddMessage("All UserDefined #1 parameters were not populated, User Defined #1 not processed")

    def USERINPUT2 ():
        if userDefinedInput2 and userDefinedWeight2:
            userDefined2Process = arcpy.Clip_analysis(userDefinedInput2, projectAOI, "in_memory\\userDefined2Clip", "")
            userDefined2Process = arcpy.SpatialJoin_analysis("fishnetCopy", userDefined2Process, "in_memory\\userDefined2SJ", "JOIN_ONE_TO_ONE", "KEEP_ALL", "#", "INTERSECT", "", "")
            userDefined2Process = arcpy.AddField_management(userDefined2Process, "UserDefined2Ranking", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            userDefined2Process = arcpy.AddField_management(userDefined2Process, "UserDefined2Weight", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            userDefined2Process = arcpy.CalculateField_management(userDefined2Process, "UserDefined2Ranking", "calc (!Join_Count!)", "PYTHON_9.3", "def calc (value):\\n  if value >=1:\\n    return 10\\n  else:\\n    return 1")
            userDefined2Process = arcpy.CalculateField_management(userDefined2Process, "UserDefined2Weight", userDefinedWeight2, "VB", "")
            userDefined2Process = arcpy.JoinField_management(crSiteOutput, "OID", userDefined2Process, "TARGET_FID", "UserDefined2Ranking;UserDefined2Weight")
            userDefined2Process = arcpy.CalculateField_management(crSiteOutput, "TOTAL_SUITABILITY", "[TOTAL_SUITABILITY] + ( [UserDefined2Ranking] * [UserDefined2Weight])", "VB", "")
            arcpy.Delete_management("in_memory")
            arcpy.AddMessage("User Defined Input #2 Processed")
        else:
            arcpy.AddMessage("All UserDefined #2 parameters were not populated, User Defined #2 not processed")

    def EXCLUSION ():
        if exclusionInput:
            exclusionProcess = arcpy.Clip_analysis(exclusionInput, projectAOI, "in_memory\\exclusionClip", "")
            exclusionProcess = arcpy.SpatialJoin_analysis("fishnetCopy", exclusionProcess, "in_memory\\exclusionSJ", "JOIN_ONE_TO_ONE", "KEEP_ALL", "#", "INTERSECT", "", "")
            exclusionProcess = arcpy.AddField_management(exclusionProcess, "ExclusionFactor", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            exclusionProcess = arcpy.CalculateField_management(exclusionProcess, "ExclusionFactor", "calc (!Join_Count!)", "PYTHON_9.3", "def calc (value):\\n  if value >= 1:\\n    return 0\\n  else:\\n    return 1")
            exclusionProcess = arcpy.JoinField_management(crSiteOutput, "OID", exclusionProcess, "TARGET_FID", "ExclusionFactor")
            exclusionProcess = arcpy.CalculateField_management(crSiteOutput, "TOTAL_SUITABILITY", "calc ( !TOTAL_SUITABILITY!, !ExclusionFactor!)", "PYTHON_9.3", "def calc (total, exclusion):\\n  return total * exclusion")
            arcpy.Delete_management("in_memory")
            arcpy.AddMessage("Exclusion Layer Processed")
        else:
            arcpy.AddMessage("Exclusion Layer was not populated, Exclusion Layer not processed")
            
    #--Call all functions
    calculateNormalizedWeight()
    FISHNET()
    ROADS()
    PORTS()
    RIVERS()
    LANDUSE()
    ELEVATION()
    USERINPUT1()
    USERINPUT2()
    EXCLUSION()
    #--Delete intermediate layers
    arcpy.Delete_management("fishnetCopy")
    arcpy.GetMessages()

except:
    arcpy.GetMessages()